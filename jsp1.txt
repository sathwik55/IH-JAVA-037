JSP
====
JSP stands for Java Server Pages.

JSP is a dynamic web resource program which is used to develop web applications.


Limitations with Servlets
=========================
> To work with servlet strong java knowledge is required.

> It is not suitable for non-java programmers.

> It does not give any implicit object.

> Handling exceptions are mandatory.

> Configuration of each servlet program in web.xml file is mandatory.

> We can't maintain HTML code and Java Code seperately.

To overcome above limitations we need to use JSP.


Advantages with JSP
====================
> To work with JSP strong java knowledge is not required.

> It is suitable for java and non-java programmers.

> It supports tag based language.

> It allows us to work with custom tags and third party supplied tags.

> It gives 9 implicit objects.

> Handling exceptions are optional.

> Configuration of each JSP program in web.xml file is optional.

> We can maintain HTML code and Java code seperately.

> It contains all the features of servlets.

First web application development having JSP program as web resource program
=============================================================================

Deployment Directory Structure
---------------------------
JspApp1
|
|---Java Resources
|
|---WebContent
	|
	|---ABC.jsp
	|
	|---WEB-INF
		|
		|---web.xml
Note:
----
In above application we need to add "servlet-api.jar" file in project build path.

ABC.jsp
-------
<center>
	<h1>
		<%
			java.util.Date d=new java.util.Date();
			out.println(d);
		%>
	</h1>
</center>

web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <welcome-file-list>
  	<welcome-file>ABC.jsp</welcome-file>
  </welcome-file-list>
  
</web-app>

Request url
---------
	http://localhost:2525/JspApp1/


Configuration of JSP program
=============================

Deployment Directory Structure
---------------------------
JspApp1
|
|---Java Resources
|
|---WebContent
	|
	|---ABC.jsp
	|
	|---WEB-INF
		|
		|---web.xml
Note:
----
In above application we need to add "servlet-api.jar" file in project build path.

ABC.jsp
-------
<center>
	<h1>
		<%
			java.util.Date d=new java.util.Date();
			out.println(d);
		%>
	</h1>
</center>

web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>ABC</servlet-name>	
  	<jsp-file>/ABC.jsp</jsp-file>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>ABC</servlet-name> 
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>

</web-app>


Request url
---------
	http://localhost:2525/JspApp1/ABC.jsp
	http://localhost:2525/JspApp1/test 


How can we make our application accessible by using url pattern
===============================================================
We can make our application accessible by using url pattern by keeping ABC.jsp file inside "WEB-INF" folder.


Deployment Directory Structure
---------------------------
JspApp1
|
|---Java Resources
|
|---WebContent
	|
	|---WEB-INF
		|
		|---ABC.jsp
		|
		|---web.xml
Note:
----
In above application we need to add "servlet-api.jar" file in project build path.

ABC.jsp
-------
<center>
	<h1>
		<%
			java.util.Date d=new java.util.Date();
			out.println(d);
		%>
	</h1>
</center>

web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>ABC</servlet-name>	
  	<jsp-file>/WEB-INF/ABC.jsp</jsp-file>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>ABC</servlet-name> 
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>

</web-app>


Request url
---------
	http://localhost:2525/JspApp1/ABC.jsp  (invalid)
	http://localhost:2525/JspApp1/test     (valid)


	
Q) What is the difference between Servlets and JSP?

Servlets						JSP
--------						--------
To work with servlets strong java knowledge is		To work with JSP strong java knowledge is not 
required.						required.
	
It is not suitable for non-java programmers.		It is suitable for non-java programmers.

It does not support tags.				It supports tags.

It does not support implicit objects.			It supports 9 implicit objects.

Handling exceptions are mandatory.			Handling exceptions are optional.

Configuration of servlet program in web.xml file	Configuration of JSP program in web.xml file
is mandatory.						is optional.

It is faster.						It is slower.

Note:
------
Servlet program executed by servlet container.

Similarly , JSP program executed by JSP container. 

But to execute JSP program , JSP container will take the support of servlet container.Hence for every JSP program one JES class will be created.

JES stands for Java Equivalent Servlet class.



JSP life cycle methods
=======================
Like Servlets, JSP also contains life cycle methods.

We have three life cycle methods in JSP.

1) _jspInit()
--------------
	It is used for instantiation event.
	This method will execute just before JES class object creation.

2) _jspService()
---------------
	It is used for request arrival event.
	This method will execute when request goes to JSP.

3) _jspDestroy() 
----------------
	It is used for destruction event.
	This method will execute just before JES class object destruction.


Phases of JSP
=============
We have two phases in JSP.

1) Translation phase 

2) Request processing phase 

1) Translation phase 
---------------------
In translation phase, our JSP program converts to JES class.


2) Request processing phase
-----------------------------
In request processing phase , our JES class will be executed and result sends to browser window as 
dynamic response.

Diagram: jsp1.1


Q) How to enable <load-on-startup> and what happens if we enable <load-on-startup>?

We can enable <load-on-startup> inside web.xml file.

web.xml
-------
<web-app>

  <servlet>
  	<servlet-name>ABC</servlet-name>	
  	<jsp-file>/WEB-INF/ABC.jsp</jsp-file>
	<load-on-startup>1</load-on-startup>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>ABC</servlet-name> 
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
 
</web-app>

If we enable <load-on-startup> then our web container perform translation phase during the server startup of during the deployment of web application.

In general, our web container creates JES class object before we give the first request.

Assignment
==========

Q) Write a java program to display the given output?

Input:
	NEX123

Output:
	Number of digits : 3 
	Sum of digits : 6
	It is even number 


























 








































